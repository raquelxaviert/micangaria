const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://koduoglrfzronbcgqrjc.supabase.co',
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvZHVvZ2xyZnpyb25iY2dxcmpjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1Nzc3MzIsImV4cCI6MjA2NTE1MzczMn0.pQ62WyGKV5tyrYsEddp2h8zRVCDf1qZ23uE8z4-FPUI'
);

async function testCompleteIntegration() {
  console.log('üîÑ TESTE COMPLETO DE INTEGRA√á√ÉO ADMIN ‚Üí SUPABASE ‚Üí FRONTEND');
  console.log('=====================================================');

  try {
    // 1. Buscar cole√ß√µes (como o admin faria)
    console.log('\n1Ô∏è‚É£ Testando carregamento de cole√ß√µes (como admin)...');
    const { data: collections, error: collError } = await supabase
      .from('collections_with_counts')
      .select('*')
      .order('display_order');

    if (collError) {
      console.error('‚ùå Erro ao carregar cole√ß√µes:', collError);
      return;
    }

    console.log(`‚úÖ ${collections.length} cole√ß√µes carregadas:`);
    collections.forEach(c => {
      console.log(`   - ${c.name} (${c.id}) - ${c.product_count} produtos`);
    });

    // 2. Buscar produtos dispon√≠veis
    console.log('\n2Ô∏è‚É£ Testando carregamento de produtos...');
    const { data: products, error: prodError } = await supabase
      .from('products')
      .select('id, name, is_active')
      .eq('is_active', true)
      .limit(3);

    if (prodError) {
      console.error('‚ùå Erro ao carregar produtos:', prodError);
      return;
    }

    console.log(`‚úÖ ${products.length} produtos dispon√≠veis:`);
    products.forEach(p => {
      console.log(`   - ${p.name} (${p.id})`);
    });

    // 3. Simular adi√ß√£o de produto √† primeira cole√ß√£o
    if (collections.length > 0 && products.length > 0) {
      const collection = collections[0];
      const product = products[0];
      
      console.log('\n3Ô∏è‚É£ Simulando adi√ß√£o de produto √† cole√ß√£o...');
      console.log(`   Cole√ß√£o: ${collection.name}`);
      console.log(`   Produto: ${product.name}`);

      // Limpar produtos existentes da cole√ß√£o
      await supabase
        .from('collection_products')
        .delete()
        .eq('collection_id', collection.id);

      // Adicionar produto
      const { data: insertData, error: insertError } = await supabase
        .from('collection_products')
        .insert([{
          collection_id: collection.id,
          product_id: product.id,
          display_order: 0
        }])
        .select();

      if (insertError) {
        console.error('‚ùå Erro ao adicionar produto:', insertError);
      } else {
        console.log('‚úÖ Produto adicionado com sucesso!');
      }

      // 4. Verificar resultado (como frontend faria)
      console.log('\n4Ô∏è‚É£ Verificando resultado (como frontend)...');
      const { data: collectionWithProducts, error: verifyError } = await supabase
        .from('collection_products')
        .select(`
          id,
          display_order,
          collection_id,
          product_id,
          collections(name, slug),
          products(name, price, image_url)
        `)
        .eq('collection_id', collection.id);

      if (verifyError) {
        console.error('‚ùå Erro na verifica√ß√£o:', verifyError);
      } else {
        console.log('‚úÖ Dados verificados:');
        collectionWithProducts.forEach(item => {
          console.log(`   - ${item.products.name} em "${item.collections.name}"`);
        });
      }

      // 5. Teste da fun√ß√£o get_collection_products
      console.log('\n5Ô∏è‚É£ Testando fun√ß√£o get_collection_products...');
      const { data: functionResult, error: funcError } = await supabase
        .rpc('get_collection_products', { collection_slug: collection.slug });

      if (funcError) {
        console.error('‚ùå Erro na fun√ß√£o:', funcError);
      } else {
        console.log(`‚úÖ Fun√ß√£o retornou ${functionResult.length} produtos`);
        functionResult.forEach(p => {
          console.log(`   - ${p.name} (R$ ${p.price})`);
        });
      }

      // 6. Limpeza
      console.log('\n6Ô∏è‚É£ Limpando dados de teste...');
      await supabase
        .from('collection_products')
        .delete()
        .eq('collection_id', collection.id);
      console.log('‚úÖ Limpeza conclu√≠da');
    }

    console.log('\nüéâ TESTE COMPLETO FINALIZADO COM SUCESSO!');
    console.log('=====================================');
    console.log('‚úÖ Admin pode carregar cole√ß√µes do Supabase');
    console.log('‚úÖ Admin pode adicionar produtos √†s cole√ß√µes');
    console.log('‚úÖ Frontend pode buscar produtos por cole√ß√£o');
    console.log('‚úÖ Fun√ß√£o get_collection_products funciona');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Teste o admin em http://localhost:9002/admin');
    console.log('2. Adicione produtos √†s cole√ß√µes');
    console.log('3. Implemente p√°ginas de cole√ß√£o no frontend');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

testCompleteIntegration();
