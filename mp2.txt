Configurar notificações de pagamento
As notificações Webhooks, também conhecidas como retornos de chamada web, são um método eficaz que permite aos servidores do Mercado Pago enviar informações em tempo real quando ocorre um evento específico relacionado à sua integração.

Com os Webhooks, o seu sistema não precisa realizar consultas contínuas para buscar atualizações. Esse mecanismo transmite dados de maneira passiva e automática, utilizando solicitações HTTP POST. Assim, otimiza a comunicação e reduz a carga nos servidores.

Consulte o fluxo geral de uma notificação no diagrama abaixo.

Diagram

A seguir, apresentamos um passo a passo para configurar as notificações de criação e atualização de pagamentos. Depois de configuradas, as notificações Webhook serão enviadas sempre que um pagamento for criado ou seu estado for modificado (Pendente, Rejeitado ou Aprovado).

Esta documentação trata exclusivamente da configuração de notificações de pagamento, incluindo criações e atualizações, por meio do evento Pagamentos. Para obter informações sobre outros eventos de notificações disponíveis para configuração, consulte a documentação de Notificações geral.
No processo de integração com o Mercado Pago, as notificações podem ser configuradas de duas maneiras:

Tipo de Configuração	Descrição	Vantagens	Quando Usar
Configuração através de Suas integrações	Este método permite configurar notificações diretamente do seu Painel de Desenvolvedor. Você pode configurar notificações para cada uma de suas aplicações, identificar contas distintas, se necessário, e validar a origem da notificação através de uma assinatura secreta.	- Identificação simples de contas distintas, garantindo uma gestão adequada em ambientes diversos.
- Alta segurança ao validar a origem das notificações através de uma assinatura secreta, que garante a integridade da informação recebida.
- Mais versátil e eficaz para manter um controle centralizado e gerenciar a comunicação com as aplicações de maneira eficiente.	Recomendado para a maioria das integrações.
Configuração durante a criação de preferências	As notificações são configuradas para cada transação individualmente durante a criação da preferência.	- Ajustes específicos para cada transação.
- Flexibilidade em casos de necessidade de parâmetros dinâmicos obrigatórios.
- Ideal para integrações como plataformas de pagamento para múltiplos vendedores.	Conveniente em casos em que seja necessário enviar um query parameter dinâmico de forma obrigatória, além de ser adequado para integrações que funcionam como uma plataforma de pagamento para múltiplos vendedores.
Importante
As URLs configuradas durante a criação de um pagamento terão prioridade sobre aquelas configuradas através de Suas integrações.

Configuração através de Suas integrações

Configuração ao criar preferências
Configuração através de Suas integrações
Você pode configurar notificações para cada uma de suas aplicações diretamente em Suas integrações de maneira eficiente e segura. Nesta seção, explicaremos como:

Indicar as URLs de notificação e configurar eventos
Validar a origem de uma notificação
Simular o recebimento de uma notificação
1. Indicar URLs de notificação e configurar o evento
Para configurar notificações Webhooks, é necessário indicar as URLs para as quais as notificações serão enviadas. Para fazer isso, siga o passo a passo abaixo:

Acesse Suas integrações e selecione a aplicação integrada com o Checkout Pro para a qual você deseja ativar as notificações.
Application

No menu à esquerda, selecione Webhooks > Configurar notificações e configure a URL que será utilizada para recebê-las.
Webhooks

Selecione a aba Modo produtivo e forneça uma URL HTTPS para receber notificações com sua integração produtiva.
URL

Selecione o evento Pagamentos para receber notificações, que serão enviadas no formato JSON através de um HTTPS POST para a URL especificada anteriormente.
Payment

5.Por fim, clique em Salvar configuração. Isso gerará uma chave secreta exclusiva para a aplicação, utilizada para validar a autenticidade das notificações recebidas, assegurando que elas sejam provenientes do Mercado Pago. Vale ressaltar que essa chave não possui prazo de validade, mas recomenda-se sua renovação periódica como medida de segurança. Para renovar a chave, basta clicar no botão Restabelecer.

2. Simular o recebimento da notificação
Para garantir que as notificações sejam configuradas corretamente, é necessário simular o recebimento delas. Para isso, siga o passo a passo abaixo:

Após configurar as URLs e os eventos, clique em Salvar configuração.
Em seguida, clique em Simular para testar se a URL indicada está recebendo as notificações corretamente.
Na tela de simulação, selecione a URL que será testada, que pode ser a URL de teste ou a de produção.
Depois, escolha o tipo de evento e insira a identificação que será enviada no corpo da notificação (Data ID).
Por fim, clique em Enviar teste para verificar a solicitação, a resposta fornecida pelo servidor e a descrição do evento. Você receberá uma resposta semelhante ao exemplo abaixo, que representa o body da notificação recebida em seu servidor.
{
  "action": "payment.updated",
  "api_version": "v1",
  "data": {
    "id": "123456"
  },
  "date_created": "2021-11-01T02:02:02Z",
  "id": "123456",
  "live_mode": false,
  "type": "payment",
  "user_id": 724484980
}
3. Validar a origem da notificação
A validação da origem de uma notificação é fundamental para assegurar a segurança e a autenticidade das informações recebidas. Este processo ajuda a prevenir fraudes e garante que apenas notificações legítimas sejam processadas.

O Mercado Pago enviará ao seu servidor uma notificação semelhante ao exemplo abaixo para um alerta do tópico payment. Neste exemplo, está incluída a notificação completa, que contém os query params, o body e o header da notificação.

Query params: São parâmetros de consulta que acompanham a URL. No exemplo, temos data.id=123456 e type=payment.
Body: O corpo da notificação contém informações detalhadas sobre o evento, como action, api_version, data, date_created, id, live_mode, type e user_id.
Header: O cabeçalho contém metadados importantes, incluindo a assinatura secreta da notificação x-signature.
POST /test?data.id=123456&type=payment HTTP/1.1
Host: prueba.requestcatcher.com
Accept: */*
Accept-Encoding: *
Connection: keep-alive
Content-Length: 177
Content-Type: application/json
Newrelic: eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkFwcCIsImFjIjoiOTg5NTg2IiwiYXAiOiI5NjA2MzYwOTQiLCJ0eCI6IjU3ZjI4YzNjOWE2ODNlZDYiLCJ0ciI6IjY0NjA0OTM3OWI1ZjA3MzMyZDdhZmQxMjEyM2I5YWE4IiwicHIiOjAuNzk3ODc0LCJzYSI6ZmFsc2UsInRpIjoxNzQyNTA1NjM4Njg0LCJ0ayI6IjE3MDk3MDcifX0=
Traceparent: 00-646049379b5f07332d7afd12123b9aa8-e7f77a41f687aecd-00
Tracestate: 1709707@nr=0-0-989586-960636094-e7f77a41f687aecd-57f28c3c9a683ed6-0-0.797874-1742505638684
User-Agent: restclient-node/4.15.3
X-Request-Id: bb56a2f1-6aae-46ac-982e-9dcd3581d08e
X-Rest-Pool-Name: /services/webhooks.js
X-Retry: 0
X-Signature: ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b
X-Socket-Timeout: 22000
{"action":"payment.updated","api_version":"v1","data":{"id":"123456"},"date_created":"2021-11-01T02:02:02Z","id":"123456","live_mode":false,"type":"payment","user_id":724484980}
A partir da notificação Webhook recebida, você poderá validar a autenticidade de sua origem. O Mercado Pago sempre incluirá a chave secreta nas notificações Webhooks que serão recebidas, o que permitirá validar sua autenticidade. Essa chave será enviada no header x-signature, que será semelhante ao exemplo abaixo.

`ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b`
Para confirmar a validação, é necessário extrair a chave contida no header e compará-la com a chave fornecida para sua aplicação em Suas integrações. Para isso, siga o passo a passo abaixo. Ao final, disponibilizamos nossos SDKs com exemplos de códigos completos para facilitar o processo.

Para extrair o timestamp (ts) e a chave (v1) do header x-signature, divida o conteúdo do header pelo caractere “,", o que resultará em uma lista de elementos. O valor para o prefixo ts é o timestamp (em milissegundos) da notificação e v1 é a chave encriptada. Seguindo o exemplo apresentado anteriormente, ts=1742505638683 e v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b.
Utilizando o template abaixo, substitua os parâmetros com os dados recebidos na sua notificação.
id:[data.id_url];request-id:[x-request-id_header];ts:[ts_header];
Os parâmetros com o sufixo _url vêm de query params. Exemplo: [data.id_url] será substituído pelo valor correspondente ao ID do evento (data.id). Este query param pode ser encontrado na notificação recebida. No exemplo de notificação mencionado anteriormente, o data.id_url é 123456.
[x-request-id_header] deverá ser substituído pelo valor recebido no header x-request-id. No exemplo de notificação mencionado anteriormente, o x-request-id é bb56a2f1-6aae-46ac-982e-9dcd3581d08e.
[ts_header] será o valor ts extraído do header x-signature. No exemplo de notificação mencionado anteriormente, o ts é 1742505638683.
Após aplicar os dados ao template, o resultado seria o seguinte id:123456;request-id:bb56a2f1-6aae-46ac-982e-9dcd3581d08e;ts:1742505638683;
Importante
Se algum dos valores apresentados no modelo anterior não estiver presente na notificação recebida, você deve removê-lo.
Em Suas integrações, selecione a aplicação integrada, clique em Webhooks > Configurar notificação e revele a chave secreta gerada.
Signature

Gere a contrachave para a validação. Para fazer isso, calcule um HMAC com a função de hash SHA256 em base hexadecimal, utilizando a chave secreta como chave e o template com os valores como mensagem.
          
$cyphedSignature = hash_hmac('sha256', $data, $key);

        
Finalmente, compare a chave gerada com a chave extraída do header, certificando-se de que correspondam exatamente. Além disso, você pode usar o timestamp extraído do header para compará-lo com um timestamp gerado no momento da recepção da notificação, a fim de estabelecer uma tolerância de atraso na recepção da mensagem.
A seguir, você pode ver exemplos de código completo:

          
<?php
// Obtain the x-signature value from the header
$xSignature = $_SERVER['HTTP_X_SIGNATURE'];
$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];

// Obtain Query params related to the request URL
$queryParams = $_GET;

// Extract the "data.id" from the query params
$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';

// Separating the x-signature into parts
$parts = explode(',', $xSignature);

// Initializing variables to store ts and hash
$ts = null;
$hash = null;

// Iterate over the values to obtain ts and v1
foreach ($parts as $part) {
    // Split each part into key and value
    $keyValue = explode('=', $part, 2);
    if (count($keyValue) == 2) {
        $key = trim($keyValue[0]);
        $value = trim($keyValue[1]);
        if ($key === "ts") {
            $ts = $value;
        } elseif ($key === "v1") {
            $hash = $value;
        }
    }
}

// Obtain the secret key for the user/application from Mercadopago developers site
$secret = "your_secret_key_here";

// Generate the manifest string
$manifest = "id:$dataID;request-id:$xRequestId;ts:$ts;";

// Create an HMAC signature defining the hash type and the key as a byte array
$sha = hash_hmac('sha256', $manifest, $secret);
if ($sha === $hash) {
    // HMAC verification passed
    echo "HMAC verification passed";
} else {
    // HMAC verification failed
    echo "HMAC verification failed";
}
?>

        
Após configurar as notificações, acesse a seção Ações necessárias após receber uma notificação para confirmar que elas foram devidamente recebidas.

Ações necessárias após receber a notificação
Quando você recebe uma notificação na sua plataforma, o Mercado Pago espera uma resposta para validar que essa recepção foi correta. Para isso, você deve devolver um HTTP STATUS 200 (OK) ou 201 (CREATED).

O tempo de espera para essa confirmação será de 22 segundos. Se não for enviada essa resposta, o sistema entenderá que a notificação não foi recebida e realizará uma nova tentativa de envio a cada 15 minutos, até que receba a resposta. Após a terceira tentativa, o prazo será prorrogado, mas os envios continuarão acontecendo.

Integrador
Mercado Pago
Integrador
Mercado Pago
tentativa: 1. Atraso: 0 minutos
tentativa: 2. Atraso: 15 minutos
tentativa: 3. Atraso: 30 minutos
tentativa: 4. Atraso: 6 horas
tentativa: 5. Atraso: 48 horas
tentativa: 6. Atraso: 96 horas
tentativa: 7. Atraso: 96 horas
tentativa: 8. Atraso: 96 horas
Após responder a notificação, confirmando seu recebimento, você pode obter todas as informações sobre o evento do tópico payments notificado fazendo um GET ao endpoint v1/payments/{id}.

Com essas informações, você poderá realizar as atualizações necessárias na sua plataforma, como por exemplo, atualizar um pagamento aprovado.

Além disso, para consultar o status do evento após a notificação, você pode utilizar os diferentes métodos dos nossos SDKs para realizar a consulta com o ID que foi enviado na notificação.

          
MercadoPago.SDK.setAccessToken("ENV_ACCESS_TOKEN");
switch (type) {
    case "payment":
        Payment payment = Payment.findById(data.id);
        break;
    case "plan":
        Plan plan = Plan.findById(data.id);
        break;
    case "subscription":
        Subscription subscription = Subscription.findById(data.id);
        break;
    case "invoice":
        Invoice invoice = Invoice.findById(data.id);
        break;
    case "point_integration_wh":
        // POST contiene la informaciòn relacionada a la notificaciòn.
        break;
}

        
Anterior



Teste de integração
O processo de testes permite verificar se as configurações realizadas durante a sua integração funcionam corretamente e se os pagamentos serão processados sem erros, evitando possíveis falhas ao disponibilizar o checkout para os compradores finais.

Para iniciar esse processo, é necessário configurar o seu ambiente de testes criando usuários de teste para vendedor e comprador. Isso permitirá que você configure um aplicativo de teste, obtenha as credenciais necessárias e as aplique na sua integração. Após isso, você poderá realizar um pagamento de teste utilizando uma conta de teste de comprador.

A seguir, apresentamos o passo a passo:

1. Criar conta de teste de vendedor
As contas de teste simulam usuários com as mesmas funcionalidades de um usuário real do Mercado Pago. Elas permitem verificar o funcionamento do seu desenvolvimento sem o risco de comprometer dados reais.

Siga os passos abaixo para criar um usuário de teste vendedor.

No Mercado Pago Developers, navegue até Suas integrações na parte superior direita da tela e clique no cartão correspondente à aplicação com a qual você está desenvolvendo.
Depois de acessar "Detalhes da aplicação", vá para a seção Contas de teste no menu lateral esquerdo e clique no botão + Criar conta de teste.
aceder ao usuários teste

Na tela "Criar nova conta", insira a descrição Vendedor para identificar a conta.
Em seguida, selecione o país de operação da conta, considerando que essa informação não poderá ser editada posteriormente.
Por se tratar de um usuário vendedor, não é necessário que indique nenhum valor para o dinheiro disponível.
Aceite a Declaração de Privacidade e os Termos e condições e clique em Criar conta de teste.
formulário de criação do usuário teste

2. Criar conta de teste comprador
Para testar sua integração, você deve realizar uma compra de teste utilizando um usuário de teste comprador, simulando a ação de um comprador real. Siga os passos abaixo para criar um usuário de teste comprador.

No Mercado Pago Developers, navegue até Suas integrações na parte superior direita da tela e clique no cartão correspondente à aplicação com a qual você está desenvolvendo.
Depois de acessar "Detalhes da aplicação", vá para a seção Contas de teste no menu lateral esquerdo e clique no botão + Criar conta de teste.
Na tela "Criar nova conta", insira a descrição Comprador para identificar a conta.
Em seguida, selecione o país de operação da conta, considerando que essa informação não poderá ser editada posteriormente.
Opcionalmente, indique um valor para o dinheiro disponível maior do que o dos dois produtos do seu site.
Aceite a Declaração de Privacidade e os Termos e condições e clique em Criar conta de teste.
testuser

3. Criar aplicação de teste e obter credenciais
Abra uma janela anônima, acesse Mercado Pago Developers e clique no botão Entrar, localizado no canto superior direito.
Faça login utilizando o usuário e a senha do usuário de teste vendedor criado na etapa anterior. Para isso, utilize o usuário e a senha atribuídos a ele. Você pode consultar esses dados na seção Contas de teste.
informações do usuário de teste

Ainda na janela anônima, vá até Suas integrações e clique em Criar aplicação. Siga os passos para criar uma aplicação para poder ter sua aplicação de testes vinculada ao seu usuário vendedor.
Uma vez criada a aplicação, selecione-a para acessar os Detalhes da aplicação. Em seguida, vá para a seção Credenciais de produção no menu lateral esquerdo. Lá, estarão disponíveis a Public Key e o Access Token do usuário de teste.
Substitua as credenciais utilizadas até agora na etapa de desenvolvimento pelas do usuário de teste vendedor nas solicitações necessárias para testar pagamentos.Realizar compras de teste
Depois de configurar seu ambiente de testes, você poderá realizar compras de teste para validar a integração com o Checkout Pro e verificar se os meios de pagamento configurados funcionam corretamente. A seguir, mostraremos como realizar diferentes verificações em sua integração.

Testar uma compra com cartão
Para testar uma compra com cartão de crédito ou débito, siga o passo a passo:

Acesse Mercado Pago Developers e faça login como o usuário de teste comprador criado previamente. Use o nome de usuário e senha associados à conta de teste. Para mais informações, consulte a seção Criar conta de teste comprador.
Inicie o Checkout utilizando a preferência de pagamento configurada anteriormente. As instruções detalhadas sobre como proceder estão disponíveis na documentação Adicionar o SDK ao frontend e inicializar o checkout.
Navegue até a loja onde você integrou o Checkout Pro, selecione o produto ou serviço desejado e, na etapa de pagamento, clique no botão de compra do Mercado Pago.
Por fim, realize uma compra de teste com os cartões de teste fornecidos abaixo. Para simular diferentes resultados de compra, utilize nomes variados para os titulares dos cartões de teste.
Cartões de teste
O Mercado Pago fornece cartões de teste que permitirão que você teste pagamentos sem usar um cartão real.

Seus dados, como número, código de segurança e data de validade, podem ser combinados com os dados relativos ao titular do cartão, que permitirão que você teste diferentes cenários de pagamento. Ou seja, você pode usar as informações de qualquer cartão de teste e testar resultados de pagamento diferentes a partir dos dados do titular.

A seguir, você pode ver os dados dos cartões de débito e crédito de teste. Selecione aquele que você quer usar para testar sua integração.

Tipo de cartão	Bandeira	Número	Código de segurança	Data de vencimento
Cartão de crédito	Mastercard	5031 4332 1540 6351	123	11/30
Cartão de crédito	Visa	4235 6477 2802 5682	123	11/30
Cartão de crédito	American Express	3753 651535 56885	1234	11/30
Cartão de débito	Elo	5067 7667 8388 8311	123	11/30
Em seguida, escolha qual cenário de pagamento testar e preencha os campos do titular do cartão (Nome e sobrenome, Tipo e número de documento) conforme indicado na tabela abaixo.

Status de pagamento	Nome e sobrenome do titular	Documento de identidade
Pagamento aprovado	APRO	(CPF) 12345678909
Recusado por erro geral	OTHE	(CPF) 12345678909
Pagamento pendente	CONT	-
Recusado com validação para autorizar	CALL	-
Recusado por quantia insuficiente	FUND	-
Recusado por código de segurança inválido	SECU	-
Recusado por problema com a data de vencimento	EXPI	-
Recusado por erro no formulário	FORM	-
Rejeitado por falta de card_number	CARD	-
Rejeitado por parcelas inválidas	INST	-
Rejeitado por pagamento duplicado	DUPL	-
Rejeitado por cartão desabilitado	LOCK	-
Rejeitado por tipo de cartão não permitido	CTNA	-
Rejeitado devido a tentativas excedidas de pin do cartão	ATTE	-
Rejeitado por estar na lista negra	BLAC	-
Não suportado	UNSU	-
Usado para aplicar regra de valores	TEST	-
Assim que você tiver preenchido todos os campos corretamente, clique no botão para processar o pagamento e aguarde o resultado.

Se o teste foi bem-sucedido, a tela de sucesso da compra de teste será exibida.

Certifique-se de que está recebendo as notificações relacionadas à transação de teste, caso já tenha configurado as notificações.

Testar uma compra com um meio de pagamento offline
Confirme se sua integração está processando corretamente os meios de pagamento offline, como Pix ou Boleto. Lembre-se de que um teste bem-sucedido será aquele em que o estado do pagamento permanece como "pendente", já que as compras realizadas com meios de pagamento offline só são concluídas quando o cliente efetua o pagamento por outros canais.

Para realizar um teste, siga o passo a passo abaixo.

Acesse Mercado Pago Developers e faça login como o usuário de teste comprador criado previamente. Use o nome de usuário e senha associados à conta de teste. Para mais informações, consulte a seção Criar conta de teste comprador.
Inicie o Checkout utilizando a preferência de pagamento configurada anteriormente. As instruções detalhadas sobre como proceder estão disponíveis na documentação Adicionar o SDK ao frontend e inicializar o checkout.
Navegue até a loja onde você integrou o Checkout Pro, selecione o produto ou serviço desejado e, na etapa de pagamento, clique no botão de compra do Mercado Pago.
Selecione um meio de pagamento offline e complete o pagamento.
Caso o teste seja bem-sucedido, uma tela será exibida orientando sobre como concluir o pagamento.